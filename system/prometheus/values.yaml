prometheusHost: &prometheus_host prometheus.ncraig.dev
prometheusCert: &prometheus_cert prometheus-ncraig-dev-cert

kube-prometheus-stack:
  crds:
    upgradeJob:
      enabled: true
      forceConflicts: true
  grafana:
    enabled: false
    forceDeployDatasources: true
    forceDeployDashboards: true
    additionalDataSources:
    - name: Loki
      type: loki
      url: http://loki-gateway.loki.svc.cluster.local
  prometheus:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: prometheus-oauth2-proxy@kubernetescrd
      hosts:
      - *prometheus_host
      tls:
      - secretName: *prometheus_cert
        hosts:
        - *prometheus_host
  alertmanager:
    alertmanagerSpec:
      routePrefix: /alertmanager
      containers:
      - name: webhook-relay
        image: nginx:latest
        envFrom:
        - secretRef:
            name: discord-webhook-url
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/templates
        - name: nginx-conf
          mountPath: /etc/nginx/conf.d
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      volumes:
      - name: config
        configMap:
          name: discord-webhook-relay-config
      - name: nginx-conf
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
    config:
      route:
        receiver: discord
        group_by:
        - namespace
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        routes:
        - receiver: discord
          matchers:
          - alertname = "Watchdog"
      receivers:
      - name: discord
        discord_configs:
        - webhook_url: http://localhost:1234
    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: prometheus-oauth2-proxy@kubernetescrd
      hosts:
      - *prometheus_host
      paths:
      - /alertmanager
      tls:
      - secretName: *prometheus_cert
        hosts:
        - *prometheus_host
  kubeEtcd:
    service:
      selector:
        app: metrics-proxy

oauth2-proxy:
  config:
    existingSecret: prometheus-oauth-secret
    configFile: |
      provider = "oidc"
      email_domains = "*"
      oidc_email_claim = "sub"
      upstreams = "static://202"
      reverse_proxy = true
      oidc_issuer_url = "https://sso.ncraig.dev/oauth2/openid/prometheus"
      code_challenge_method = "S256"
  ingress:
    enabled: true
    className: traefik
    hosts:
    - *prometheus_host
    path: /oauth2
    pathType: Prefix
